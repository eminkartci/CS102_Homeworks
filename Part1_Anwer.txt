
Question: Some programmers prefer not to use protected access, 
because they believe it breaks the encapsulation of the super-class. 
Discuss the relative merits of using protected access vs. private access in super-classes.

Answer: 

    The access modifiers determines the accessibility of a class attributes. If an attribute is 
defined as private, then it is only accessible within the class. Therefore, getter and setter methods 
are used to read and assign value. This is called as encapsulation and useful for controlling the 
variables' value. For example, assume that we have a person class. It has height and weight which are 
fractional numbers, so we defined them as double. We know that these attributes shouldn't be less than 0.
To avoid mistaken assignments, we can check all assignment trials by a setter method instead of assinging directly.
As a result, private provides the security of the data by resticting all access except the class.

    Protected access modifier allows to use the attribute without getter and setter in the same package and sub-classes.
Allowing only sub-classes, protected mode at least prevent errors that may be occur completely unrelated classes. Sometimes
the classes have many attributes and it is not practical to encapsulate all of them. Hence, instead of using public accessor
, protected is more reasonable.